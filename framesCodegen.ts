import { readdir } from 'fs/promises'
import { join, basename } from 'path'

async function generateAndSave() {
  const code = await generate()
  await Bun.write('./framesImport.generated.ts', code)
}

async function generate() {
  const dir = './frames'
  const files = await readdir(dir)

  const bases = new Set()
  for (const f of files) {
    if (f.endsWith('.svelte')) bases.add(basename(f, '.svelte'))
    else if (f.endsWith('.meta.json')) bases.add(basename(f, '.meta.json'))
  }

  const names = [...bases].sort()

  let imports = ''
  let map = ''

  names.forEach((n, i) => {
    const c = `i${i + 1}c`
    const m = `i${i + 1}m`
    imports += `import ${c} from './frames/${n}.svelte';\n`
    imports += `import ${m} from './frames/${n}.meta.json';\n`
    map += `  "${n}": { Component: ${c}, meta: ${m} },\n`
  })

  return `
  // GENERATED BY server/framesCodegen.ts
${imports}
const framesComponents = {
${map}};
export default framesComponents;
`.trimStart()
}

export default generateAndSave
